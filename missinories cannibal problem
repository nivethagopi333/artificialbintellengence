class State:
    def __init__(self, missionaries_left, cannibals_left, boat_left):
        self.missionaries_left = missionaries_left
        self.cannibals_left = cannibals_left
        self.boat_left = boat_left
    def is_valid_state(self):
        return (
            self.missionaries_left >= 0
            and self.cannibals_left >= 0
            and (self.missionaries_left >= self.cannibals_left or self.cannibals_left == 0)
            and (self.boat_left == 0 or self.boat_left == 1 or self.boat_left == 2)
        )
    def get_all_possible_actions(self):
        actions = []
        if self.boat_left == 0:
            if self.missionaries_left > 0:
                actions.append((1, 0))
            if self.cannibals_left > 0:
                actions.append((0, 1))
            if self.missionaries_left > 1:
                actions.append((2, 0))
            if self.cannibals_left > 1:
                actions.append((0, 2))
        else:
            if self.missionaries_left < 3:
                actions.append((-1, 0))
            if self.cannibals_left < 3:
                actions.append((-1, 1))
            if self.missionaries_left > 0:
                actions.append((-2, 0))
            if self.cannibals_left > 0:
                actions.append((-2, 1))
        return actions
    def apply_action(self, action):
        new_state = State(
            self.missionaries_left + action[0],
            self.cannibals_left + action[1],
            self.boat_left ^ 1,
        )
        return new_state
    def is_goal_state(self):
        return self.missionaries_left == 0 and self.cannibals_left == 0
def solve_missionaries_and_cannibals_problem(initial_state):
    queue = []
    visited = set()
    queue.append(initial_state)
    while queue:
        current_state = queue.pop(0)
        if current_state.is_goal_state():
            return current_state
        visited.add(current_state)
        for action in current_state.get_all_possible_actions():
            new_state = current_state.apply_action(action)
            if new_state.is_valid_state() and new_state not in visited:
                queue.append(new_state)
    return None
def main():
    initial_state = State(3, 3, 0)
    final_state = solve_missionaries_and_cannibals_problem(initial_state)
    if final_state is None:
        print("No solution found.")
    else:
        print("Solution:")
        print(final_state)
if __name__ == "__main__":
    main()
